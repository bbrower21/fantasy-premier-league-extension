{"version":3,"sources":["App.js","Budweiser.js","serviceWorker.js","index.js","logo.png"],"names":["App","imageURL","className","src","logo","alt","id","Player","props","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.db1a6006.chunk.js","sourcesContent":["import React from 'react';\n\nimport logo from './logo.png';\nimport './App.css';\n\nfunction App() {\n  const imageURL =\n    'https://resources.premierleague.com/premierleague/photos/players/110x140/p';\n  return (\n    <div className='App'>\n      <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n        <div className='team-title'>\n            <h5>Clem Tribeca</h5>\n            <h5>162</h5>\n        </div>\n        <div className='container'>\n          <h6 className=\"player_head\" id=\"player_head\"><u>Player</u></h6>\n          <h6 className=\"score_head\" id=\"score_head\"><u>Score</u></h6>\n          <img src={imageURL + '98980.png'} className='image' id='image1' />\n          <ul className='player' id='player1'>\n            <b>Emiliano Martínez</b>\n          </ul>\n          <span className='score' id='score1'>\n            13\n          </span>\n          <img src={imageURL + '166477.png'} className='image' id='image2' />\n          <ul className='player' id='player2'>\n            <b>Timothy Castagne</b>\n          </ul>\n          <span className='score' id='score2'>\n            9\n          </span>\n          <img src={imageURL + '169187.png'} className='image' id='image3' />\n          <ul className='player' id='player3'>\n            <b>Trent Alexander-Arnold</b>\n          </ul>\n          <span className='score' id='score3'>\n            7\n          </span>\n          <img src={imageURL + '220627.png'} className='image' id='image4' />\n          <ul className='player' id='player4'>\n            <b>Justin James</b>\n          </ul>\n          <span className='score' id='score4'>\n            7\n          </span>\n          <img src={imageURL + '226597.png'} className='image' id='image5' />\n          <ul className='player' id='player5'>\n            <b>Gabriel Magalhães</b>\n          </ul>\n          <span className='score' id='score5'>\n            2\n          </span>\n          <img src={imageURL + '85971.png'} className='image' id='image6' />\n          <ul className='player' id='player6'>\n            <b>Heung-Min Son</b>\n          </ul>\n          <span className='score' id='score6'>\n            24\n          </span>\n          <img src={imageURL + '82403.png'} className='image' id='image7' />\n          <ul className='player' id='player7'>\n            <b>Wilfred Zaha</b>\n          </ul>\n          <span className='score' id='score7'>\n            15\n          </span>\n          <img src={imageURL + '165808.png'} className='image' id='image8' />\n          <ul className='player' id='player8'>\n            <b>Hélder Costa</b>\n          </ul>\n          <span className='score' id='score8'>\n            14\n          </span>\n          <img src={imageURL + '219847.png'} className='image' id='image9' />\n          <ul className='player' id='player9'>\n            <b>Kai Havertz</b>\n          </ul>\n          <span className='score' id='score9'>\n            1\n          </span>\n          <img src={imageURL + '177815.png'} className='image' id='image10' />\n          <ul className='player' id='player10'>\n            <b>Dominic Calvert-Lewin</b>\n          </ul>\n          <span className='score' id='score10'>\n            17\n          </span>\n          <img src={imageURL + '78830.png'} className='image' id='image11' />\n          <ul className='player' id='player11'>\n            <b>Harry Kane</b>\n          </ul>\n          <span className='score' id='score11'>\n            21\n          </span>\n          <img src={imageURL + '131897.png'} className='image' id='image12' />\n          <ul className='player' id='player12'>\n            <b>Mathew Ryan</b>\n          </ul>\n          <span className='score' id='score12'>\n            2\n          </span>\n          <img src={imageURL + '199798.png'} className='image' id='image13' />\n          <ul className='player' id='player13'>\n            <b>Ezri Konsa Ngoyo Konsa</b>\n          </ul>\n          <span className='score' id='score13'>\n            15\n          </span>\n          <img src={imageURL + '72222.png'} className='image' id='image14' />\n          <ul className='player' id='player14'>\n            <b>Mateusz Klich</b>\n          </ul>\n          <span className='score' id='score14'>\n            9\n          </span>\n          <img src={imageURL + '102057.png'} className='image' id='image15' />\n          <ul className='player' id='player15'>\n            <b>Raúl Jiménez</b>\n          </ul>\n          <span className='score' id='score15'>\n            6\n          </span>\n        </div>\n        {/* Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass Budweiser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      team: {\n        player1: {\n          name: null,\n          score: null,\n        },\n        player2: null,\n        player3: null,\n        player4: null,\n        player5: null,\n        player6: null,\n        player7: null,\n        player8: null,\n        player9: null,\n        player10: null,\n        player11: null,\n        player12: null,\n        player13: null,\n        player14: null,\n        player15: null,\n      },\n      // score: {\n      //   player1score1: null,\n      //   player2score2: null,\n      //   player3score3: null,\n      //   player4score4: null,\n      //   player5score5: null,\n      //   player6score6: null,\n      //   player7score7: null,\n      //   player8score8: null,\n      //   player9score9: null,\n      //   player10score10: null,\n      //   player11score11: null,\n      //   player12score12: null,\n      //   player13score13: null,\n      //   player14score14: null,\n      //   player15score15: null,\n      // }\n    };\n  }\n\n  // Loading up players when component mounts\n  async componentDidMount() {\n    try {\n      const response = await fetch(`https://fantasy.premierleague.com/api/bootstrap-static/`);\n      const data = await response.json()\n      console.log(Array.isArray(data.elements))\n      for (let elem of data.elements) {\n        if (elem.id === 390) {\n          console.log(elem.first_name)\n          console.log(elem.photo);\n        }\n      }\n\n    }  catch (err) {\n      console.log(\"error\", err)\n    }\n\n    // const success = await fetch(\n    //   'https://users.premierleague.com/accounts/login/', \n    //   {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-type': 'application/json',\n    //     },\n    //     body: JSON.stringify({\n    //       password: 'codesmith123',\n    //       login: 'pulpandmills@gmail.com',\n    //       redirect_uri: 'https://fantasy.premierleague.com/',\n    //       app: 'plfpl-web',\n    //     }),\n    //   }\n    // );\n    // const football = fetch('https://fantasy.premierleague.com/api/my-team/6751967/')\n    // console.log(football)\n    // // const dataQuery = await fetch('https://fantasy.premierleague.com/api/my-team/6751967/').then((data) => data.json()).then((data) => console.log('i am the 2nd console log: ', data))\n    // //   .then(() => console.log('************'))\n    // //   .then(\n    // //     fetch(`https://fantasy.premierleague.com/api/my-team/6751967/`)\n    // //       .then((response) => response.json())\n    // //       .then((data) => console.log(data))\n    // //       .catch((err) => console.log(err))\n    // //   );\n    // const token = 'qVuw722OCPOPUupAztTh7QMdVdj1uCnKRxtNudHbpQPKhWhFJZWyuEZgdcna32Uv';\n    // const secondFetch = await fetch(\n    //   'https://fantasy.premierleague.com/api/my-team/6751967/',\n    //   {\n    //     headers: {\n    //       Authorization: `token ${token}`,\n    //     },\n    //   }\n    // )\n    //   .then((data) => data.json())\n    //   .then((data) => console.log(data));\n  }\n\n  render() {\n    const team = [];\n    for (let i = 1; i < 16; i++) {\n      team.push(\n        <Player\n          key={`player${i}`}\n          className='players_col'\n          player={this.getPlayer}\n        />\n      );\n    }\n    return (\n      <div>\n        <h1>My Fantasy Team</h1>\n      <li>\n        <Player />\n      </li>\n      {/* <span>\n        <Score />\n      </span> */}\n      </div>\n    );\n  }\n}\n\nfunction Player(props) {\n  return (\n  <div></div>\n  )\n}\n\nexport default Budweiser;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Budweiser from './Budweiser';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c10b8dee.png\";"],"sourceRoot":""}